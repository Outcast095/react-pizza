// Это ваш файл схемы Prisma,
// подробнее о нём в документации: https://pris.ly/d/prisma-schema

// Генератор клиента Prisma для создания JS-клиента
generator client {
  provider = "prisma-client-js" // Указывает, что будет использоваться Prisma Client на JavaScript
}

// Источник данных - подключение к базе данных
datasource db {
  provider = "postgresql"      // Используется PostgreSQL как СУБД
  url      = env("DATABASE_URL") // URL подключения берется из переменной окружения
}

// Модель пользователя
model User {
  id       Int    @id @default(autoincrement()) // Уникальный идентификатор пользователя, автоматически увеличивается
  fullName String                         // Полное имя пользователя
  phone    String @unique                 // Номер телефона, уникален для каждого пользователя

  role         UserRole          @default(USER) // Роль пользователя (по умолчанию USER), ссылается на перечисление UserRole
  orders       Order[]                       // Список заказов пользователя (связь один-ко-многим)
  cartItems    CartItem[]                   // Список элементов корзины пользователя (связь один-ко-многим)
  cart         Cart?                        // Корзина пользователя (связь один-к-одному, опционально)
  verification VerificationCode?            // Код верификации пользователя (связь один-к-одному, опционально)

  phoneVerified DateTime?                   // Дата и время верификации телефона (может быть null)
  createdAt     DateTime  @default(now())   // Дата создания записи (по умолчанию текущее время)
}

// Модель продукта (например, категория пицц)
model Product {
  id       Int     @id @default(autoincrement()) // Уникальный идентификатор продукта
  name     String                         // Название продукта (например, "Классическая пицца")
  imageUrl String                         // URL изображения продукта
  active   Boolean @default(false)         // Статус активности продукта (по умолчанию выключен)

  pizzas Pizza[]                          // Список пицц, относящихся к этому продукту (связь один-ко-многим)

  createdAt DateTime @default(now())      // Дата создания записи
  updatedAt DateTime @updatedAt           // Дата последнего обновления записи
}

// Модель конкретной пиццы
model Pizza {
  id Int @id @default(autoincrement())    // Уникальный идентификатор пиццы

  price    Int                            // Цена пиццы
  size     Int                            // Размер пиццы (например, 30 для 30 см)
  type     Int                            // Тип теста (например, 1 = тонкое, 2 = толстое)
  carbs    Int                            // Количество углеводов в граммах
  fats     Int                            // Количество жиров в граммах
  kcal     Int                            // Калорийность в килокалориях
  proteins Int                            // Количество белков в граммах
  weight   Int                            // Вес пиццы в граммах

  ingredients Ingredient[]                 // Список ингредиентов пиццы (связь многие-ко-многим)
  cartItems   CartItem[]                  // Список элементов корзины, где используется эта пицца (связь один-ко-многим)

  productId Int                           // Внешний ключ для связи с продуктом
  product   Product @relation(fields: [productId], references: [id]) // Связь с моделью Product (многие-ко-одному)

  active    Boolean  @default(false)      // Статус активности пиццы (по умолчанию выключена)
  createdAt DateTime @default(now())      // Дата создания записи
  updatedAt DateTime @updatedAt           // Дата последнего обновления записи
}

// Модель ингредиента
model Ingredient {
  id       Int    @id @default(autoincrement()) // Уникальный идентификатор ингредиента
  name     String                         // Название ингредиента (например, "Сыр")
  price    Int                            // Цена ингредиента
  imageUrl String                         // URL изображения ингредиента

  pizzas    Pizza[]                       // Список пицц, где используется ингредиент (связь многие-ко-многим)
  cartItems CartItem[]                    // Список элементов корзины, где используется ингредиент (связь многие-ко-многим)

  createdAt DateTime @default(now())      // Дата создания записи
}

// Модель корзины пользователя
model Cart {
  id Int @id @default(autoincrement())    // Уникальный идентификатор корзины

  userId Int  @unique                     // Внешний ключ для связи с пользователем (уникален, так как у пользователя только одна корзина)
  user   User @relation(fields: [userId], references: [id]) // Связь с моделью User (один-к-одному)

  totalAmount Int @default(0)             // Общая сумма товаров в корзине (по умолчанию 0)

  items  CartItem[]                       // Список элементов корзины (связь один-ко-многим)
  orders Order[]                          // Список заказов, созданных из этой корзины (связь один-ко-многим)

  createdAt DateTime @default(now())      // Дата создания записи
  updatedAt DateTime @updatedAt           // Дата последнего обновления записи
}

// Модель элемента корзины
model CartItem {
  id Int @id @default(autoincrement())    // Уникальный идентификатор элемента корзины

  pizzaId Int                             // Внешний ключ для связи с пиццей
  pizza   Pizza @relation(fields: [pizzaId], references: [id]) // Связь с моделью Pizza (многие-ко-одному)

  cartId Int                              // Внешний ключ для связи с корзиной
  cart   Cart @relation(fields: [cartId], references: [id]) // Связь с моделью Cart (многие-ко-одному)

  userId Int                              // Внешний ключ для связи с пользователем
  user   User @relation(fields: [userId], references: [id]) // Связь с моделью User (многие-ко-одному)

  ingredients Ingredient[]                 // Список дополнительных ингредиентов в элементе (связь многие-ко-многим)

  quantity Int                            // Количество пицц в этом элементе

  createdAt DateTime @default(now())      // Дата создания записи
  updatedAt DateTime @updatedAt           // Дата последнего обновления записи
}

// Модель заказа
model Order {
  id Int @id @default(autoincrement())    // Уникальный идентификатор заказа

  userId Int                              // Внешний ключ для связи с пользователем
  user   User @relation(fields: [userId], references: [id]) // Связь с моделью User (многие-ко-одному)

  cartId Int                              // Внешний ключ для связи с корзиной
  cart   Cart @relation(fields: [cartId], references: [id]) // Связь с моделью Cart (многие-ко-одному)

  status      OrderStatus @default(PENDING) // Статус заказа (по умолчанию PENDING), ссылается на перечисление OrderStatus
  totalAmount Int                         // Общая сумма заказа
  paymentId   String?                     // ID платежа (опционально, может быть null)

  createdAt DateTime @default(now())      // Дата создания записи
  updatedAt DateTime @updatedAt           // Дата последнего обновления записи
}

// Модель кода верификации
model VerificationCode {
  id Int @id @default(autoincrement())    // Уникальный идентификатор кода верификации

  userId Int  @unique                     // Внешний ключ для связи с пользователем (уникален, так как у пользователя один код)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade) // Связь с моделью User (один-к-одному, удаляется при удалении пользователя)

  code String                             // Код верификации (например, "123456")

  expiresAt DateTime @default(now())      // Дата и время истечения срока действия кода (по умолчанию текущее время)
  createdAt DateTime @default(now())      // Дата создания записи
  updatedAt DateTime @updatedAt           // Дата последнего обновления записи

  @@unique([userId, code])                // Уникальная комбинация пользователя и кода (чтобы избежать дублирования)
}

// Перечисление статусов заказа
enum OrderStatus {
  PENDING    // Заказ в ожидании
  SUCCEEDED  // Заказ успешно выполнен
  CANCELLED  // Заказ отменён
}

// Перечисление ролей пользователя
enum UserRole {
  USER   // Обычный пользователь
  ADMIN  // Администратор
}

